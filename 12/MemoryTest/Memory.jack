// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM;
    static Array heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let RAM = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if((address<24577) & (address>2047)){
            return RAM[address];
        }
        else{
            return -1;
        }
        
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        if((address<24577) & (address>2047)){
            let RAM[address] = value;
        }
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int addr, requSize, returnAddr;

        let addr = freeList;
        let requSize = size + 2;

        //check for free size the first entry in the freeList
        if((RAM[addr + 1] > requSize) | (RAM[addr + 1] = requSize)){

                //update size of this free block 
                let RAM[addr + 1] = RAM[addr + 1] - requSize;

                //calculate the address of new free block and set its size
                let returnAddr = addr + 2 + RAM[addr + 1] + 2;
                let RAM[returnAddr - 1] = size;

                return returnAddr;
            }

        //scan the freelist and search for sufficient free block
        while(RAM[addr] > 0){
            let addr = RAM[addr];
            if((RAM[addr + 1] > requSize) | (RAM[addr + 1] = requSize)){

                //update size of this free block
                let RAM[addr + 1] = RAM[addr + 1] - requSize;

                //calculate the address of new free block and set its size
                let returnAddr = addr + 2 + RAM[addr + 1] + 2;
                let RAM[returnAddr - 1] = size;

                return returnAddr;
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp;
        
        let temp = RAM[freeList];
        let RAM[freeList] = o - 2;
        let RAM[o-2] = temp;
        return;
    }    
}
