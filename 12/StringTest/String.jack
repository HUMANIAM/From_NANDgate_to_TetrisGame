// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int maxlen;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxlen = maxLength;
        if(maxLength = 0){
            let str = Array.new(1);
        }
        else{
            let str = Array.new(maxLength);
        }
        
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    if(length < maxlen){
        let str[length] = c;
        let length = length + 1;
    }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(length > 0)
        {let length = length - 1;} 
        return;
    }
    /**check if character is digit or alpha */
    method boolean isDigit(char c)
    {
        if((c>47) & (c<58))
        {return true;}
        else
        {return false;}
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, intval, negative;

        let i = 0;
        let intval = 0;
        let negative = 0;

        //handle negative values
        if(str[0] = 45)
        {
            let negative = 1;
            let i = i + 1;
        }

        while(i<length)
        {
            if(isDigit(str[i]) = true)
            {
                let intval = (intval * 10) + (str[i] - 48);
            }
            else
            {let i = length;}
            
            let i = i + 1;
        }

        if(negative = 1)
        {return -intval ; }
        else
        {return intval ;}
    }

    /**reverse the string */
    method void reverse()
    {
        var int mid, i, temp;
        let i = 0;
        let mid = length/2;

        while(i < mid)
        {
            let temp = str[i];
            let str[i] = str[length - i - 1];
            let str[length - i - 1] = temp;
            let i = i + 1;
        }

        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int intval, d, negative;

        let length = 0;
        let negative = 0;

        //handle negative numbers
        if(val < 0){
            let val = -val;
            let negative = 1;
        }
       
        if(val < 10){
            let str[length] = val + 48;
            let length = length + 1;
            let val = 0;
        }

        while(val > 0)
        {
            let intval = val;
            let val = (val / 10);
            let d = intval - (val*10);
            let str[length] = d + 48 ;
            let length = length + 1;
        }
       
       //set the sign of the result value
       if(negative = 1){
            let str[length] = 45;
            let length = length + 1;
       }
       
        do reverse();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129 ;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
