// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array screen;
    static Array twoTothe;

    /** Initializes the Screen. */
    function void init() {
        var int i, n;
        
        let color = true;
        let screen = 16384;
        let twoTothe = Array.new(16);

        //initialize the twoTothe array
        let i = 0;
        let n = 1;
        while(i<15)
        {
            let twoTothe[i] = n;
            let n = n + n;
            let i = i + 1;
        }
        let twoTothe[i] = n;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i<8192){
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
       var int addr, value, xposition, remend;

        //evaluate the address
        let xposition = x / 16;
        let addr = screen + (32 * y) + xposition;
        let remend = x - (xposition*16);    // x%16
    
        //set this bit in the value with color without affecting the other bits
        do Screen.setBit(addr, remend);

        return;
    }

    function void setBit( int address, int remend){
        var int value;
        let value = Memory.peek(address);
        if(~color){
                let value = value & (-1 - twoTothe[remend]);
                do Memory.poke(address, value);
            }
            else{
                let value = value | twoTothe[remend];
                do Memory.poke(address, value);
            }
        return;
    }

    function void setWords(int addr1, int addr2){
        while((addr1<addr2) | (addr1 = addr2)){
            if(~color){
                do Memory.poke(addr1, 0);
            }
            else{
                do Memory.poke(addr1, -1);
            }
                let addr1 = addr1 + 1;
        }
        return;
    }
     

    function void setUpBits(int address, int pos){
        var int value;
        let value = Memory.peek(address);
        if(~color){
            
                let value = value & (-(-1-twoTothe[pos])-2);
                do Memory.poke(address, value); 
        }
        else{
            if(pos = 1){
                do Memory.poke(address, -1);
            }
            else{
               let value = value | -twoTothe[pos];
               do Memory.poke(address, value); 
            }
        }
        return;
    }

    function void setDownBits(int address, int pos){
        var int value;
        let value = Memory.peek(address);
        if(~color){
            if(pos = 15){
             do Memory.poke(address, 0);
            }
            else{
                let value = value | (-twoTothe[pos + 1]);
                do Memory.poke(address, value);
            }
        }
        else{
            if(pos = 15){
                 do Memory.poke(address, -1);
            }
            else{
                let value = value | (-(-1-twoTothe[pos+1])-2);
                do Memory.poke(address, value);
            }
        }
        return;
    }
    /*draw horizontal ine**/
    function void drawLineHorizon(int x1, int y1, int x2, int y2){
        var int xposition, i, addr1, addr2, remend1, remend2, from, to;

        let i = 0;
        //evaluate the address of (x1,y1)
        let xposition = x1 / 16;
        let addr1 = screen + (32 * y1) + xposition;
        let remend1 = x1 - (xposition*16);    // x%16

        //evaluate the address of (x2, y2)
        let xposition = x2 / 16;
        let addr2 = screen + (32 * y2) + xposition;
        let remend2 = x2 - (xposition*16);    // x%16

        //if two points belongs to the same word
        if(addr1 = addr2){
            let from = Math.min(remend1, remend2);
            let to = Math.max(remend1, remend2);
            
            //set these bits with the color
            while(from<(to+1)){
                do Screen.setBit(addr1, from);
                let from = from + 1;
            }
        }
        else{
            if(addr1<addr2){

                //fill the rest bits of address (x1 , y1)  with the correct bits
                do Screen.setUpBits(addr1, remend1);
        
                //fill bits between addr1 and addr2 with the correct values
                do Screen.setWords((addr1 + 1), (addr2 - 1));

                //fill the the addresss of (x2,y2) with the correct bits
                do Screen.setDownBits(addr2, remend2); 

            }
            else{        

                //fill the rest bits of address (x2 , y2)  with the correct bits
                //do Output.printInt(remend1);
                do Screen.setDownBits(addr1, remend1);

                //fill bits between addr1 and addr2 with the correct values
                do Screen.setWords((addr2+1), (addr1-1));

                //fill bits of address (x1, y1) with the correct bits
                do Screen.setUpBits(addr2, remend2);
            }

        }
            
    return ;
}

    /*draw vertical ine**/
    function void drawLineVertical(int x1, int y1, int x2, int y2){
        var int xposition, i, addr1, addr2, remend1, remend2, fromaddr, toaddr;

        let i = 0;
        //evaluate the address of (x1,y1)
        let xposition = x1 / 16;
        let addr1 = screen + (32 * y1) + xposition;
        let remend1 = x1 - (xposition*16);    // x%16

        //evaluate the address of (x2, y2)
        let xposition = x2 / 16;
        let addr2 = screen + (32 * y2) + xposition;
        let remend2 = x2 - (xposition*16);    // x%16

        //range of words that we need to set specific bit in them
        let fromaddr = Math.min(addr1, addr2);
        let toaddr = Math.max(addr1, addr2);

        while(fromaddr<(toaddr))
        {
            do Screen.setBit(fromaddr, remend1);
            let fromaddr = fromaddr + 32;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
       var int a, b, x, y, dx, dy, diff, dxabs, dyabs;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = 0;
        let x = x1;
        let y = y1;

        //these will help us in draw the line with correct direction
        if(dy<0) {let dyabs = -dy;}
        else     {let dyabs = dy;}

        if(dx<0) {let dxabs = -dx;}
        else     {let dxabs = dx;}

         if(dx = 0){
            do Screen.drawLineVertical(x1, y1, x2, y2);
        }
        else{
            //handle horizontal lines
            if(dy = 0){
                do Screen.drawLineHorizon(x1, y1, x2, y2);
            }
            //else if dx!=0 and dy != 0
            else{
                while( ((a<dxabs) | (a = dxabs)) & ((b<dyabs) | (b = dyabs))){            
                do Screen.drawPixel(x,y);

                if(diff < 0){
                    let diff = diff + dyabs;
                    let a = a + 1;
                }
                else{
                    let diff = diff - dxabs;
                    let b = b + 1;
                }

                if(dx < 0) {let x = x1 - a;}
                else       {let x = x1 + a;}

                if(dy < 0) {let y = y1 - b;}
                else       {let y = y1 + b; }
            }
        }   
    }
return;
}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
      and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, i;

        let dy = y2 - y1;
        let i = 0;

        while(i<(dy+1)){
            do Screen.drawLineHorizon(x1, y1+i, x2, y1+i);
            let i = i + 1;
        }
        return; 
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, rpow2, sqroot;
        
        let dx = 0;
        let rpow2 = r * r;
        while((dx<r) | (dx=r)){
            let sqroot = Math.sqrt( (rpow2 - (dx * dx)) );
            do Screen.drawLineVertical( (x-dx), (y+sqroot), (x-dx), (y-sqroot));
            do Screen.drawLineVertical( (x+dx), (y+sqroot), (x+dx), (y-sqroot));
            let dx = dx + 1 ;
        }
        return;
    }
}
