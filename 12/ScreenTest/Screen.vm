function Screen.init 2
push constant 0
not
pop static 0
push constant 16384
pop static 1
push constant 16
call Array.new 1
pop static 2
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push local 0
push static 2
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push static 2
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8192
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 4
push argument 0
push constant 16
call Math.divide 2
pop local 2
push static 1
push constant 32
push argument 1
call Math.multiply 2
add
push local 2
add
pop local 0
push argument 0
push local 2
push constant 16
call Math.multiply 2
sub
pop local 3
push local 0
push local 3
call Screen.setBit 2
pop temp 0
push constant 0
return
function Screen.setBit 1
push argument 0
call Memory.peek 1
pop local 0
push static 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
neg
push argument 1
push static 2
add
pop pointer 1
push that 0
sub
and
pop local 0
push argument 0
push local 0
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push local 0
push argument 1
push static 2
add
pop pointer 1
push that 0
or
pop local 0
push argument 0
push local 0
call Memory.poke 2
pop temp 0
label IF_END0
push constant 0
return
function Screen.setWords 0
label WHILE_EXP0
push argument 0
push argument 1
lt
push argument 0
push argument 1
eq
or
not
if-goto WHILE_END0
push static 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push constant 0
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 0
push constant 1
neg
call Memory.poke 2
pop temp 0
label IF_END0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setUpBits 1
push argument 0
call Memory.peek 1
pop local 0
push static 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
neg
push argument 1
push static 2
add
pop pointer 1
push that 0
sub
neg
push constant 2
sub
and
pop local 0
push argument 0
push local 0
call Memory.poke 2
pop temp 0
goto IF_END0
label IF_FALSE0
push argument 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push constant 1
neg
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push argument 1
push static 2
add
pop pointer 1
push that 0
neg
or
pop local 0
push argument 0
push local 0
call Memory.poke 2
pop temp 0
label IF_END1
label IF_END0
push constant 0
return
function Screen.setDownBits 1
push argument 0
call Memory.peek 1
pop local 0
push static 0
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push constant 15
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
push constant 0
call Memory.poke 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 0
push argument 1
push constant 1
add
push static 2
add
pop pointer 1
push that 0
neg
or
pop local 0
push argument 0
push local 0
call Memory.poke 2
pop temp 0
label IF_END1
goto IF_END0
label IF_FALSE0
push argument 1
push constant 15
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push constant 1
neg
call Memory.poke 2
pop temp 0
goto IF_END2
label IF_FALSE2
push local 0
push constant 1
neg
push argument 1
push constant 1
add
push static 2
add
pop pointer 1
push that 0
sub
neg
push constant 2
sub
or
pop local 0
push argument 0
push local 0
call Memory.poke 2
pop temp 0
label IF_END2
label IF_END0
push constant 0
return
function Screen.drawLineHorizon 8
push constant 0
pop local 1
push argument 0
push constant 16
call Math.divide 2
pop local 0
push static 1
push constant 32
push argument 1
call Math.multiply 2
add
push local 0
add
pop local 2
push argument 0
push local 0
push constant 16
call Math.multiply 2
sub
pop local 4
push argument 2
push constant 16
call Math.divide 2
pop local 0
push static 1
push constant 32
push argument 3
call Math.multiply 2
add
push local 0
add
pop local 3
push argument 2
push local 0
push constant 16
call Math.multiply 2
sub
pop local 5
push local 2
push local 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 4
push local 5
call Math.min 2
pop local 6
push local 4
push local 5
call Math.max 2
pop local 7
label WHILE_EXP0
push local 6
push local 7
push constant 1
add
lt
not
if-goto WHILE_END0
push local 2
push local 6
call Screen.setBit 2
pop temp 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
goto IF_END0
label IF_FALSE0
push local 2
push local 3
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push local 4
call Screen.setUpBits 2
pop temp 0
push local 2
push constant 1
add
push local 3
push constant 1
sub
call Screen.setWords 2
pop temp 0
push local 3
push local 5
call Screen.setDownBits 2
pop temp 0
goto IF_END1
label IF_FALSE1
push local 2
push local 4
call Screen.setDownBits 2
pop temp 0
push local 3
push constant 1
add
push local 2
push constant 1
sub
call Screen.setWords 2
pop temp 0
push local 3
push local 5
call Screen.setUpBits 2
pop temp 0
label IF_END1
label IF_END0
push constant 0
return
function Screen.drawLineVertical 8
push constant 0
pop local 1
push argument 0
push constant 16
call Math.divide 2
pop local 0
push static 1
push constant 32
push argument 1
call Math.multiply 2
add
push local 0
add
pop local 2
push argument 0
push local 0
push constant 16
call Math.multiply 2
sub
pop local 4
push argument 2
push constant 16
call Math.divide 2
pop local 0
push static 1
push constant 32
push argument 3
call Math.multiply 2
add
push local 0
add
pop local 3
push argument 2
push local 0
push constant 16
call Math.multiply 2
sub
pop local 5
push local 2
push local 3
call Math.min 2
pop local 6
push local 2
push local 3
call Math.max 2
pop local 7
label WHILE_EXP0
push local 6
push local 7
lt
not
if-goto WHILE_END0
push local 6
push local 4
call Screen.setBit 2
pop temp 0
push local 6
push constant 32
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawLine 9
push argument 2
push argument 0
sub
pop local 4
push argument 3
push argument 1
sub
pop local 5
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 6
push argument 0
pop local 2
push argument 1
pop local 3
push local 5
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 5
neg
pop local 8
goto IF_END0
label IF_FALSE0
push local 5
pop local 8
label IF_END0
push local 4
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 4
neg
pop local 7
goto IF_END1
label IF_FALSE1
push local 4
pop local 7
label IF_END1
push local 4
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawLineVertical 4
pop temp 0
goto IF_END2
label IF_FALSE2
push local 5
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 1
push argument 2
push argument 3
call Screen.drawLineHorizon 4
pop temp 0
goto IF_END3
label IF_FALSE3
label WHILE_EXP0
push local 0
push local 7
lt
push local 0
push local 7
eq
or
push local 1
push local 8
lt
push local 1
push local 8
eq
or
and
not
if-goto WHILE_END0
push local 2
push local 3
call Screen.drawPixel 2
pop temp 0
push local 6
push constant 0
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 6
push local 8
add
pop local 6
push local 0
push constant 1
add
pop local 0
goto IF_END4
label IF_FALSE4
push local 6
push local 7
sub
pop local 6
push local 1
push constant 1
add
pop local 1
label IF_END4
push local 4
push constant 0
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push argument 0
push local 0
sub
pop local 2
goto IF_END5
label IF_FALSE5
push argument 0
push local 0
add
pop local 2
label IF_END5
push local 5
push constant 0
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push argument 1
push local 1
sub
pop local 3
goto IF_END6
label IF_FALSE6
push argument 1
push local 1
add
pop local 3
label IF_END6
goto WHILE_EXP0
label WHILE_END0
label IF_END3
label IF_END2
push constant 0
return
function Screen.drawRectangle 2
push argument 3
push argument 1
sub
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push local 0
push constant 1
add
lt
not
if-goto WHILE_END0
push argument 0
push argument 1
push local 1
add
push argument 2
push argument 1
push local 1
add
call Screen.drawLineHorizon 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 3
push constant 0
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 1
label WHILE_EXP0
push local 0
push argument 2
lt
push local 0
push argument 2
eq
or
not
if-goto WHILE_END0
push local 1
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 2
push argument 0
push local 0
sub
push argument 1
push local 2
add
push argument 0
push local 0
sub
push argument 1
push local 2
sub
call Screen.drawLineVertical 4
pop temp 0
push argument 0
push local 0
add
push argument 1
push local 2
add
push argument 0
push local 0
add
push argument 1
push local 2
sub
call Screen.drawLineVertical 4
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
