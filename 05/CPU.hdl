// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
    // Put your code here:

    //A register
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=mout1);

    //load A reg with the input when A-instruction or des is A reg
    Not(in=instruction[15], out=notopcode);
    Or(a=instruction[5], b=notopcode, out=loadAreg);
    ARegister(in=mout1, load=loadAreg, out=ARegister , out[0..14]=addressM);

    Mux16(a=ARegister , b=inM, sel=instruction[12], out=mout2);

    //D register
    And(a=instruction[4], b=instruction[15], out=loaddreg);
    DRegister(in=aluout, load=loaddreg, out=DRegister);

    //ALU
    ALU(x=DRegister , y=mout2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],  
             out=aluout, out=outM, zr=zrcb, ng=ngcb);

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    //pc
    Not(in=instruction[0], out=not0);
    Not(in=instruction[1], out=not1);
    Not(in=instruction[2], out=not2);
    Not(in=zrcb, out=notzr);
    Not(in=ngcb, out=notng);

    And(a=instruction[2], b=instruction[1], out=j11);
    And(a=not2, b=instruction[1], out=j01);
    And(a=instruction[2], b=not1, out=j10);
    And(a=not2, b=not1, out=j00);

    And(a=ngcb, b=notzr, out=andnz10);
    And(a=notng, b=zrcb, out=andnz01);
    And(a=notng, b=notzr, out=andnz00);
    Xor(a=zrcb, b=ngcb, out=znxor);


    //loading Areg into pc if any condition is specified condition 
    
    //first condition JMP
    And(a=j11, b=instruction[0], out=con1);

    //second condition JLE
    And(a=j11, b=not0, out=jj0);
    And(a=jj0, b=znxor, out=con2);

    //third condition JNE
    And(a=j10, b=instruction[0], out=jj1);
    And(a=jj1, b=notzr, out=con3);

    //fourth conditoin JLT
    And(a=j10, b=not0, out=jj2);
    And(a=jj2, b=andnz10, out=con4);

    //fifth condition JGE
    And(a=j01, b=instruction[0], out=jj3);
    And(a=jj3, b=notng, out=con5);

    //sixth condition JEQ
    And(a=j01, b=not0, out=jj4);
    And(a=jj4, b=andnz01, out=con6);

    //seventh condition JGT
    And(a=j00, b=instruction[0], out=jj5);
    And(a=jj5, b=andnz00, out=con7);

    //oring all conditions
    Or8Way(in[0]=false, in[1]=con1, in[2]=con2, in[3]=con3, in[4]=con4, in[5]=con5, in[6]=con6, in[7]=con7, out=load1);

    //check that it is C-instruction
    And(a=load1, b=instruction[15], out=load);

    Not(in=load, out=notload);

    PC(in=ARegister , load=load, inc=notload, reset=reset, out[0..14]=pc);


    }